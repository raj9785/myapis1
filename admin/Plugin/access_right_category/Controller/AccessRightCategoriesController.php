<?php/** * @license MIT License (http://www.opensource.org/licenses/mit-license.php) * * PHP version 5 * CakePHP version 1.3 *//** * Fares Users Controller * * @package Fares * @subpackage users.controllers */class AccessRightCategoriesController extends AccessRightCategoryAppController {    /**     * Controller name     *     * @var string     */    var $name = 'AccessRightCategories';    /**     * Helpers     *     * @var array     */    public $helpers = array('Html', 'Form', 'Session', 'Time', 'Text');    //public $paginate = array('limit'=>5,'order'=>'Country.id','page'=>1);    /**     * Components     *     * @var array     */    public $components = array('Auth', 'Session', 'Email', 'Cookie', 'Search.Prg', 'RequestHandler');    public $presetVars = array(        array('field' => 'farecategory_id', 'type' => 'value'),        array('field' => 'state_id', 'type' => 'value'),        array('field' => 'city_id', 'type' => 'value'),    );    // public $presetVars = 	true;    public function beforeFilter() {        parent::beforeFilter();        $this->set('model', $this->modelClass);            }    function index() { //echo "yo";die;        // Breadcrumb        $this->set('tab_open', 'accessrightcategory');        $pages[__('Dashboard', true)] = array('plugin' => false, 'controller' => '/');                $limit = 50;        //$limitValue = $limit = ($this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') ) ? $this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') : Configure::read('defaultPaginationLimit');        //$this->set('limitValue', $limitValue);        $this->set('limit', $limit);        // $this->{$this->modelClass}->data[$this->modelClass] = $this->passedArgs;        // @$parsedConditions = $this->{$this->modelClass}->parseCriteria($this->passedArgs);        $conditions = array();        if (!empty($this->request->query)) {            if (isset($this->request->query['name']) && $this->request->query['name'] != "") {                array_push($conditions, array('AccessRightCategory.name LIKE' => "%" . $this->request->query['name'] . "%"));                $this->set("name", $this->request->query['name']);            }                       if (@$this->request->query['from_date'] and @ $this->request->query['to_date']) {                array_push($conditions, array('(FROM_UNIXTIME(AccessRightCategory.created, "%Y-%m-%d") >= ? AND FROM_UNIXTIME(AccessRightCategory.created, "%Y-%m-%d") <= ?)' => array($this->request->query['from_date'], $this->request->query['to_date'])));            } else            if (@$this->request->query['from_date']) {                array_push($conditions, array('FROM_UNIXTIME(AccessRightCategory.created, "%Y-%m-%d") >= ' => $this->request->query['from_date']));            } else            if (@$this->request->query['to_date']) {                array_push($conditions, array('FROM_UNIXTIME(AccessRightCategory.created, "%Y-%m-%d") <= ' => $this->request->query['to_date']));            }            $this->set("from_date", @$this->request->query['from_date']);            $this->set("to_date", @$this->request->query['to_date']);        }        $page = ((isset($this->params['named']['page']) && $this->params['named']['page'] != NULL) ? $this->params['named']['page'] : 0);        $this->set('page', $page);        $this->paginate = array(            'conditions' => array($conditions),            'limit' => $limit,            'order' => array($this->modelClass . '.id' => 'desc')        );                $this->set('result', $this->paginate());        $this->set('title_for_layout', 'System Roles');    }    public function change_status_active() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                $data['status'] = 1;                $this->{$this->modelClass}->id = $this->data['id'];                $this->{$this->modelClass}->save($data, false);                $text_action = "activated";                $json_data = json_encode($this->request->data);                $this->global_logs("access_right_categories", $this->data['id'], 2, $text_action, $json_data);                echo json_encode(array('succ' => 1, 'msg' => 'Record Status has been changed.'));                die;            }        }        exit;    }    public function change_status_inactive() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                $data['status'] = 0;                $this->{$this->modelClass}->id = $this->data['id'];                $this->{$this->modelClass}->save($data, false);                $text_action = "inactivated";                $json_data = json_encode($this->request->data);                $this->global_logs("access_right_categories", $this->data['id'], 3, $text_action, $json_data);                echo json_encode(array('succ' => 1, 'msg' => 'Record Status has been changed.'));                die;            }        }        exit;    }    public function deleterow() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                $data = $this->{$this->modelClass}->findById($this->data['id']);                $this->loadModel('AccessPermission');                $this->AccessPermission->deleteAll(array('access_right_category_id' => $this->data['id']));                if (!empty($data)) {                    if ($this->{$this->modelClass}->delete($this->data['id'])) {                        echo json_encode(array('succ' => 1, 'msg' => 'Record has been deleted'));                        die;                    }                }            }        }        exit;    }    function add() {        $this->set('tab_open', 'accessrightcategory');        $pages[__('Dashboard', true)] = array('plugin' => false, 'controller' => '/');        $breadcrumb = array('pages' => $pages, 'active' => __('Access Rights System Role Management', true));        $this->set('breadcrumb', $breadcrumb);        $pageHeading = 'Access Rights System Role Management';        $this->set('pageHeading', $pageHeading);        if (!empty($this->data)) {            //pr($this->data); die;            $this->{$this->modelClass}->set($this->data);            if ($this->{$this->modelClass}->CheckValidCategory()) {                if ($this->{$this->modelClass}->save($this->data, false)) {                    $userid = $this->{$this->modelClass}->id;                    $this->Session->setFlash('System Role has been added.', 'success');                    $this->redirect(array('action' => 'index'));                }            }        }        $this->set('title_for_layout', 'Add New System Role');    }    function edit($id = null) {        $this->set('tab_open', 'accessrightcategory');               $this->set('id', $id);        $user = $this->{$this->modelClass}->findById($id);        $this->{$this->modelClass}->set($user);        $this->set('record', $user);        if (!empty($this->data)) {            //pr($this->data); exit;            $this->request->data[$this->modelClass]['modified'] = time();            $modified_by = $this->Auth->user('firstname') ? $this->Auth->user('firstname') . " " . $this->Auth->user('lastname') : $this->Auth->user('username');            $this->request->data[$this->modelClass]['modified_by'] = $modified_by;            $this->{$this->modelClass}->id = $id;            $this->{$this->modelClass}->set($this->data);            if ($this->{$this->modelClass}->CheckValidCategory()) {                if ($this->{$this->modelClass}->save($this->data, false)) {                    $this->loadModel('AccessPermission');                    $this->AccessPermission->deleteAll(array('AccessPermission.access_right_category_id' => $id));                    $userid = $id;                    $this->{$this->modelClass}->AccessPermission->savePermission($userid, $this->data);                    $this->Session->setFlash('System Role has been updated.', 'success');                    $this->redirect(array('action' => 'index'));                }            } else {                $this->Session->setFlash('System Role not updated.', 'error');                $this->redirect(array('action' => 'edit', $id));            }        } else {            $array1 = array(                'Language' => 'Select field_value From access_permissions Where field_name="Language" AND access_right_category_id=' . $id,                'State' => 'Select field_value From access_permissions Where field_name="State" AND access_right_category_id=' . $id,                'Disctict' => 'Select field_value From access_permissions Where field_name="Disctict" AND access_right_category_id=' . $id,                'Block' => 'Select field_value From access_permissions Where field_name="Block" AND access_right_category_id=' . $id,                'Education' => 'Select field_value From access_permissions Where field_name="Education" AND access_right_category_id=' . $id,                'Technical_Courses' => 'Select field_value From access_permissions Where field_name="Technical_Courses" AND access_right_category_id=' . $id,                'Job_Categories' => 'Select field_value From access_permissions Where field_name="Job_Categories" AND access_right_category_id=' . $id,                'Training_Categories' => 'Select field_value From access_permissions Where field_name="Training_Categories" AND access_right_category_id=' . $id,                'Jobs' => 'Select field_value From access_permissions Where field_name="Jobs" AND access_right_category_id=' . $id,                'Trainings' => 'Select field_value From access_permissions Where field_name="Trainings" AND access_right_category_id=' . $id,                'System_Roles' => 'Select field_value From access_permissions Where field_name="System_Roles" AND access_right_category_id=' . $id,                'masters' => 'Select field_value From access_permissions Where field_name="masters" AND access_right_category_id=' . $id,                'jobtraining' => 'Select field_value From access_permissions Where field_name="jobtraining" AND access_right_category_id=' . $id,                'accesscontrol' => 'Select field_value From access_permissions Where field_name="accesscontrol" AND access_right_category_id=' . $id,                'System_Users' => 'Select field_value From access_permissions Where field_name="System_Users" AND access_right_category_id=' . $id,                                            );                        $this->{$this->modelClass}->virtualFields = $array1;            $this->request->data = $this->{$this->modelClass}->read();        }        $this->set('title_for_layout', 'Edit System Role');    }    function access_category() { //echo "yo";die;        // Breadcrumb        $this->set('tab_open', 'accessrightuser');        $pages[__('Dashboard', true)] = array('plugin' => false, 'controller' => '/');        $breadcrumb = array('pages' => $pages, 'active' => __(' Access Right System Role', true));        $this->set('breadcrumb', $breadcrumb);        $pageHeading = 'Manage Access Right';        $this->set('pageHeading', $pageHeading);// Pagging        if (!empty($this->data) && isset($this->data['recordsPerPage'])) {            $limitValue = $limit = $this->data['recordsPerPage'];            $this->Session->write($this->name . '.' . $this->action . '.recordsPerPage', $limit);        } else {            $this->Prg->commonProcess();        }        $limitValue = $limit = ($this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') ) ? $this->Session->read($this->name . '.' . $this->action . '.recordsPerPage') : Configure::read('defaultPaginationLimit');        $this->set('limitValue', $limitValue);        $this->set('limit', $limit);        $this->{$this->modelClass}->data[$this->modelClass] = $this->passedArgs;        @$parsedConditions = $this->{$this->modelClass}->parseCriteria($this->passedArgs);        $this->paginate = array(            'conditions' => array($parsedConditions),            'limit' => $limit,            'order' => array($this->modelClass . '.id' => 'desc')        );        $this->set('parsedConditions', $parsedConditions);        //pr($this->paginate());        $this->set('result', $this->paginate());    }}