<?php/** * @license MIT License (http://www.opensource.org/licenses/mit-license.php) * * PHP version 5 * CakePHP version 1.3 *//** * MotorTypes Users Controller * * @package MotorTypes * @subpackage users.controllers */class ApplicationsController extends ApplicationAppController {    /**     * Controller name     *     * @var string     */    var $name = 'Applications';    /**     * Helpers     *     * @var array     */    public $helpers = array('Html', 'Form', 'Session', 'Time', 'Text');    //public $paginate = array('limit'=>5,'order'=>'MotorType.id','page'=>1);    /**     * Components     *     * @var array     */    public $components = array('Auth', 'Session', 'Email', 'Cookie', 'Search.Prg', 'RequestHandler');    public $presetVars = array(        array('field' => 'name', 'type' => 'value')    );    public $data_types = array(        "int" => "INT",        "varchar" => "VARCHAR",        "text" => "TEXT"    );    // public $presetVars = 	true;    public function beforeFilter() {        parent::beforeFilter();        $this->set('tab_open', 'applications');        $this->set('model', $this->modelClass);        $this->loadModel('ApplicationType');        $ApplicationTypes = $this->ApplicationType->find('list', array(            'fields' => array(                'id', 'name'            ),        ));        $this->set('ApplicationTypes', $ApplicationTypes);        $this->set('data_types', $this->data_types);    }    function index() {//echo "yo";die;        // Breadcrumb        if (!empty($this->data)) {            $this->Prg->commonProcess();        }        $page = ((isset($this->params->named['page']) && $this->params->named['page'] != "") ? $this->params->named['page'] : 0);        $limitValue = $limit = 50;        $this->set('limitValue', $limitValue);        $this->set('limit', $limit);        $this->{$this->modelClass}->data[$this->modelClass] = $this->passedArgs;        //$parsedConditions = $this->{$this->modelClass}->parseCriteria($this->passedArgs);        $this->paginate = array(            'limit' => $limit,            'order' => array($this->modelClass . '.order' => 'asc'),        );        //pr($this->paginate());        $this->set('result', $this->paginate());        $this->set('page', $page);        $this->set('title_for_layout', 'Apps');    }    function add() {        //$this->data=$this->myapp;        if (!empty($this->data)) {            $this->{$this->modelClass}->set($this->data);            //pr($this->data);            //exit;            $upload_folder = WBROOT_PATH_LOGO;            $uploadImgArray = $this->data['Application']['image'];            $file_name = @$this->myapp['Application']['image'];            ;            if (isset($uploadImgArray) && $uploadImgArray['name'] != "") {                $file_name = basename($uploadImgArray['name']);                $imgExtension = pathinfo($file_name, PATHINFO_EXTENSION);                $image_name = explode("." . $imgExtension, $file_name);                $prefix = time();                $file_name = base64_encode($prefix . $image_name[0]) . "." . $imgExtension;                if (move_uploaded_file($uploadImgArray['tmp_name'], $upload_folder . DS . $file_name)) {                                    }            }            if ($this->data['Application']['id']) {                $application_code = $this->myapp['Application']['application_code'];            } else {                $application_code = rand(10000000, 99999999);            }            //pr($this->data);            //exit;            $application_type_id = $this->data['Application']['application_type_id'];            if ($this->data['Application']['application_type_id'] == 'OTHER') {                if ($this->data['Application']['application_type_name']) {                    $this->loadModel('ApplicationType');                    $ApplicationTp = $this->ApplicationType->find('count', array(                        'conditions' => array(                            'name' => trim($this->data['Application']['application_type_name']),                        ),                        'fields' => array(                            'id', 'name'                        ),                    ));                    if ($ApplicationTp == 0) {                        $dataT = array(                            'name' => $this->data['Application']['application_type_name'],                            'created_on' => date("Y-m-d H:i:s"),                        );                        if ($this->ApplicationType->save($dataT)) {                            $application_type_id = $this->ApplicationType->id;                        }                    }                }            }            $datas = array(                'name' => $this->data['Application']['name'],                'android' => @$this->data['Application']['android'][0] ? $this->data['Application']['android'][0] : 0,                'ios' => @$this->data['Application']['ios'][0] ? $this->data['Application']['ios'][0] : 0,                'web' => @$this->data['Application']['web'][0] ? $this->data['Application']['web'][0] : 0,                'backend_server' => $this->data['Application']['backend_server'],                'db_option' => $this->data['Application']['db_option'],                'type_of_end_user' => $this->data['Application']['type_of_end_user'],                'application_type_id' => $application_type_id,                'image' => $file_name,                'application_code' => $application_code,                'created_on' => date("Y-m-d H:i:s"),                'created_by' => $this->Auth->user('id'),                'user_id' => $this->Auth->user('id'),            );            // pr($datas);exit;            if ($this->{$this->modelClass}->save($datas)) {                $latest_id = $this->{$this->modelClass}->id;                $this->loadModel('ApplicationRole');                $this->ApplicationRole->deleteAll(array("ApplicationRole.application_id" => $latest_id));                if (!empty($this->data['Application']['login_types'])) {                    $eds = $this->data['Application']['login_types'];                    $datas2 = array();                    if (!empty($eds)) {                        $i = 0;                        foreach ($eds as $ind => $ivalue) {                            $datas2['ApplicationRole'][$i]['application_id'] = $latest_id;                            $datas2['ApplicationRole'][$i]['user_role_id'] = $ivalue;                            $i++;                        }                    }                    if (!empty($datas2)) {                        $this->ApplicationRole->saveAll($datas2['ApplicationRole']);                    }                }                $this->Session->setFlash('Application has been added.', 'success');                $this->redirect(array('action' => 'add'));            }        } else {            $this->data = $this->myapp;            $this->set("app_data", $this->data);        }        $this->set('title_for_layout', 'My App');    }    function add_table() {        $this->set('tab_open', 'tables');        $this->set('title_for_layout', 'Add New Table');        $conn = $this->get_connection();        $q = "SELECT * FROM information_schema.tables where TABLE_SCHEMA='" . DB . "' and TABLE_TYPE='BASE TABLE'";        $result = $conn->query($q);        $tableNames = array();        while ($row = mysqli_fetch_row($result)) {            $tableNames[$row[2]] = $row[2];        }        $this->set('tableNames', $tableNames);        $id_user = $this->Auth->user('id');        $application_id = $this->myapp['Application']['id'];        $this->set('application_id', $application_id);        if ($application_id) {            if (!empty($this->data)) {                $this->{$this->modelClass}->set($this->data);                $table_name = $this->data['Application']['table_name'];                $fields = $this->data['Application']['name'];                $field_data_types = $this->data['Application']['field_data_type'];                $data_lengths = $this->data['Application']['data_length'];                $primary_key = $this->data['Application']['primary_key'];                $auto_incremented = $this->data['Application']['auto_incremented'];                $foreign_key = $this->data['Application']['foreign_key'];                $foreign_key_ref_table = $this->data['Application']['foreign_key_ref_table'];                $table_field = $this->data['Application']['table_field'];                $q = "CREATE TABLE `$table_name` (";                foreach ($fields as $i => $name) {                    $dt = @$field_data_types[$i] ? @$field_data_types[$i] : "int";                    $dtl = @$data_lengths[$i] ? @$data_lengths[$i] : "";                    $dt_type = $dtl ? $dt . "(" . $dtl . ")" : $dt;                    $extra = "";                    if ($name == $primary_key) {                        if ($auto_incremented == 1) {                            $extra = "AUTO_INCREMENT PRIMARY KEY";                        } else {                            $extra = "PRIMARY KEY";                        }                    }                    $q .= "`$name` $dt_type NOT NULL $extra,";                }                $q .= "`application_id` int(6) NOT NULL,";                $q .= "`is_active` tinyint(1) NOT NULL DEFAULT '1',";                $q .= "`created_on` datetime DEFAULT NULL,";                $q .= "`created_by` int(11) NOT NULL";                if ($foreign_key) {                    $q .= ", FOREIGN KEY ($foreign_key) ";                    $q .= " REFERENCES $foreign_key_ref_table($table_field) ON DELETE NO ACTION ON UPDATE CASCADE";                }                $q .= ") ENGINE=InnoDB DEFAULT CHARSET=utf8;";                //create txt files;                $file_name = $table_name . '.sql';                $file_path = WBROOT_PATH_SQLFILES . $file_name;                $myfile = fopen($file_path, "a") or die("Unable to open file!");                fwrite($myfile, $q);                fclose($myfile);                $conn = $this->get_connection();                $result = $conn->query($q);                $this->Session->setFlash('Table has been added.', 'success');                $this->redirect(array('action' => 'add_table'));            }        }    }    public function get_field_list() {        $this->autoLayout = false;        $this->autoRender = false;        $table_name = $this->request->data('table_name');        if ($this->request->is('ajax')) {            $conn = $this->get_connection();            $fields = array();            $q = "SHOW COLUMNS FROM $table_name";            $result = $conn->query($q);            $html = "<option value=''>Select</option>";            while ($x = mysqli_fetch_assoc($result)) {                $selected = "";                $html .= "<option " . $selected . " value='" . $x['Field'] . "'>" . $x['Field'] . "</option>";            }            echo $html;        }    }    public function menus() {        $this->set('tab_open', 'menus');        $this->set('title_for_layout', 'Menus');        $application_id = $this->myapp['Application']['id'];        $this->set('application_id', $application_id);        $id_user = $this->Auth->user('id');        $this->loadModel('ApplicationRole');        $category_list = $this->ApplicationRole->find('list', array(            'conditions' => array(                'ApplicationRole.application_id' => $application_id            ),            'joins' => array(                array(                    'table' => 'user_roles',                    'alias' => 'UserRole',                    'type' => 'INNER',                    'conditions' => array(                        'UserRole.id = ApplicationRole.user_role_id'                    )                )            ),            'fields' => array(                'ApplicationRole.user_role_id', 'UserRole.name'            ),        ));        $this->set('category_list', $category_list);        $this->loadModel('Menu');        //get menu listing//        $application_role_id = 4;        $menu_list = $this->Menu->find('all', array(            'conditions' => array(                'Menu.application_id' => $application_id,                'Menu.application_role_id' => $application_role_id            )        ));        $this->set('menu_list', $menu_list);        if (!empty($this->data)) {            $this->{$this->modelClass}->set($this->data);            $application_role_id = $this->data['Application']['application_role_id'];            $menu_name = $this->data['Application']['menu_name'];            $is_master = $this->data['Application']['is_master'];            $is_home_page = $this->data['Application']['is_home_page'];            $this->Menu->deleteAll(array("Menu.application_id" => $application_id, "Menu.application_role_id" => $application_role_id));            $save = array();            if (!empty($menu_name)) {                $i = 0;                $created_on = date("Y-m-d H:i:s");                foreach ($menu_name as $index => $mname) {                    if ($mname) {                        $save['Menu'][$i]['application_id'] = $application_id;                        $save['Menu'][$i]['application_role_id'] = $application_role_id;                        $save['Menu'][$i]['menu_name'] = $mname;                        $save['Menu'][$i]['is_home_page'] = $is_home_page[$index];                        $save['Menu'][$i]['is_master'] = $is_master[$index];                        $save['Menu'][$i]['created_by'] = $id_user;                        $save['Menu'][$i]['created_on'] = $created_on;                        $save['Menu'][$i]['menu_orders'] = $i+1;                        $i++;                    }                }            }            if (!empty($save)) {                $this->Menu->saveAll($save['Menu']);                $this->Session->setFlash('Menu has been saved.', 'success');                $this->redirect(array('action' => 'menus'));            }        }    }    function edit($id = null) {        $this->set('id', $id);        $user = $this->{$this->modelClass}->findById($id);        $this->{$this->modelClass}->set($user);        $this->set('record', $user);        if (empty($this->data)) {            $this->data = $this->{$this->modelClass}->read();        } else {            $this->{$this->modelClass}->set($this->data);            //if ($this->{$this->modelClass}->validateUpdate()) {            $datas = array(                'name' => $this->data['Application']['name'],                'code' => $this->data['Application']['code'],                'modified_on' => date("Y-m-d H:i:s"),                'modified_by' => $this->Auth->user('id'),            );            if ($this->{$this->modelClass}->save($datas)) {                $this->Session->setFlash('Application has been updated.', 'success');                $this->redirect(array('action' => 'index'));            }            //}        }        $this->set('title_for_layout', 'Update Application');    }    public function change_status() {        if ($this->request->is('Ajax')) {            if ($this->data['id'] != null) {                $data['is_active'] = $this->data['status'] == 1 ? false : true;                $this->{$this->modelClass}->id = $this->data['id'];                $this->{$this->modelClass}->save($data, false);                echo json_encode(array('succ' => 1, 'msg' => 'Status has been changed.'));                die;            }        }        exit;    }}